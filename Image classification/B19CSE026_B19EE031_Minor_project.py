# -*- coding: utf-8 -*-
"""Minor_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hEmef2SVWAf0d7mb2OQIfSNUqi-kEf7J
"""

from google.colab import drive
drive.mount('/content/drive')

import cv2, os
data = []
target = []
path1 =  "/content/drive/MyDrive/dataset/with mask"
path2 = "/content/drive/MyDrive/dataset/without mask"
img_names1 = os.listdir(path1)
img_names2 = os.listdir(path2)
for img_name in img_names1:
  path = os.path.join(path1,img_name)
  img = cv2.imread(path)
  try:
    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    resized_img = cv2.resize(gray_img, (100,100))
    data.append(resized_img)
    target.append(1)
  except Exception as e:
    pass
for img_name in img_names2:
  path = os.path.join(path1,img_name)
  img = cv2.imread(path)
  try:
    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    resized_img = cv2.resize(gray_img, (100,100))
    data.append(resized_img)
    target.append(0)
  except Exception as e:
    pass

import numpy as np
import pandas as pd
data = np.array(data)
target = np.array(target)
data.shape

data[0]

"""Preprocessing of data"""

data = data/255
data[:5]

data = np.reshape(data,(data.shape[0],data.shape[1]*data.shape[2]))

data.shape

data[:5]

from sklearn.feature_selection import SelectKBest, chi2
new_data = SelectKBest(chi2, k=10000).fit_transform(data, target)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(new_data,target,test_size=0.5,random_state=0)

# PCA reduction to 10 components
from sklearn.decomposition import PCA
pca = PCA(n_components=10)
pca.fit(x_train)
pca_x_train = pca.transform(x_train)
pca_x_test = pca.transform(x_test)

"""Model training and testing"""

# Using MLP Classifier
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
model1 = MLPClassifier(alpha=0.001)
model1.fit(x_train, y_train)
y_pred1 = model1.predict(x_test)
mlp_acc = accuracy_score(y_test, y_pred1)
mlp_acc

#Using SVM
from sklearn.svm import SVC
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
model2 = make_pipeline(StandardScaler(), SVC(probability=True))
model2.fit(x_train, y_train)
y_pred2 = model2.predict(x_test)
svm_acc=accuracy_score(y_test, y_pred2)
svm_acc

#Naive bayes model
from sklearn.naive_bayes import GaussianNB
model3 = GaussianNB()
model3.fit(x_train, y_train)
y_pred3 = model3.predict(x_test)
gauss_acc = accuracy_score(y_test, y_pred3)
gauss_acc

#Using perceptron model
from sklearn.linear_model import Perceptron
perc = Perceptron(max_iter=1000)
perc.fit(x_train,y_train)
y_pred_perc = perc.predict(x_test)
perc_acc = accuracy_score(y_test,y_pred_perc)
perc_acc

#Using Random Forest
from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(x_train,y_train)
y_pred_rf = rf.predict(x_test)
rf_acc = accuracy_score(y_test,y_pred_rf)
rf_acc

#Naive bayes model
from sklearn.naive_bayes import MultinomialNB
mult = MultinomialNB()
mult.fit(x_train,y_train)
y_pred_mult = mult.predict(x_test)
mult_acc = accuracy_score(y_test,y_pred_mult)
mult_acc

"""Model training with PCA data reduction"""

model4 = MLPClassifier(alpha=0.001)
model4.fit(pca_x_train, y_train)
y_pred4 = model4.predict(pca_x_test)
m4_acc = accuracy_score(y_test, y_pred4)
m4_acc

model5 = make_pipeline(StandardScaler(), SVC(probability=True))
model5.fit(pca_x_train, y_train)
y_pred5 = model5.predict(pca_x_test)
m5_acc=accuracy_score(y_test, y_pred5)
m5_acc

model6 = GaussianNB()
model6.fit(pca_x_train, y_train)
y_pred6 = model6.predict(pca_x_test)
m6_acc = accuracy_score(y_test, y_pred6)
m6_acc

"""Calculation of recall, precision, f1 score and accuracy of models"""

from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score
acc1 = accuracy_score(y_test, y_pred1)
prec1 = precision_score(y_test, y_pred1)
rec1 = recall_score(y_test, y_pred1)
f1_score1 = f1_score(y_test, y_pred1)

acc2 = accuracy_score(y_test, y_pred2)
prec2 = precision_score(y_test, y_pred2)
rec2 = recall_score(y_test, y_pred2)
f1_score2 = f1_score(y_test, y_pred2)

acc3 = accuracy_score(y_test, y_pred3)
prec3 = precision_score(y_test, y_pred3)
rec3 = recall_score(y_test, y_pred3)
f1_score3 = f1_score(y_test, y_pred3)

acc4 = accuracy_score(y_test, y_pred4)
prec4 = precision_score(y_test, y_pred4)
rec4 = recall_score(y_test, y_pred4)
f1_score4 = f1_score(y_test, y_pred4)

acc5 = accuracy_score(y_test, y_pred5)
prec5 = precision_score(y_test, y_pred5)
rec5 = recall_score(y_test, y_pred5)
f1_score5 = f1_score(y_test, y_pred5)

acc6 = accuracy_score(y_test, y_pred6)
prec6 = precision_score(y_test, y_pred6)
rec6 = recall_score(y_test, y_pred6)
f1_score6 = f1_score(y_test, y_pred6)

comp = [[acc1,prec1,rec1,f1_score1],[acc2,prec2,rec2,f1_score2],[acc3,prec3,rec3,f1_score3],[acc4,prec4,rec4,f1_score4],[acc5,prec5,rec5,f1_score5],[acc6,prec6,rec6,f1_score6]]
comp_df = pd.DataFrame(comp, columns=("Accuracy", "Precision", "Recall", "F1_score"), index=("MLP_Classifier","SVM","Naive_bayes","MLP_with_PCA","SVM_with_PCA","Naive_bayes_with_PCA"))
comp_df

"""Comparison of models"""

import matplotlib.pyplot as plt
fig = plt.figure(figsize=(10,5))
ax = fig.add_axes([0,0,1,1])
accuracies = [mlp_acc,m4_acc,svm_acc,m5_acc,gauss_acc,m6_acc]
models = ["MLP_Classifier","MLP_with_PCA","SVM","SVM_with_PCA","Naive_bayes","Naive_bayes_PCA"]
ax.bar(models,accuracies)
plt.xlabel('Models')
plt.ylabel('Accuracy')
plt.show()

fig = plt.figure(figsize=(10,5))
ax = fig.add_axes([0,0,1,1])
accuracies = [mlp_acc,svm_acc,gauss_acc,perc_acc,rf_acc,mult_acc]
models = ["MLP_Classifier","SVM","Gaussian NB","Perceptron","Random Forest","Multinomial NB"]
ax.bar(models,accuracies)
plt.xlabel('Models')
plt.ylabel('Accuracy')
plt.show()

# Perceptron model with PCA dimension reduction
perc.fit(pca_x_train, y_train)
y_pred7 = perc.predict(pca_x_test)
m7_acc = accuracy_score(y_test, y_pred6)
m7_acc

# Random forest with PCA reduction
rf.fit(pca_x_train, y_train)
y_pred6 = rf.predict(pca_x_test)
m8_acc = accuracy_score(y_test, y_pred6)
m8_acc

"""Tuning hyperparameters of some models."""

from sklearn.linear_model import Perceptron
perceptron = Perceptron(max_iter=1000,eta0=0.01)
perceptron.fit(x_train,y_train)
perceptron.score(x_test,y_test)

from sklearn.metrics import classification_report
y_pred = perceptron.predict(x_test)
print(classification_report(y_test,y_pred))

from sklearn.svm import SVC
svc = SVC(C=0.8,gamma='auto')
svc.fit(x_train,y_train)
svc.score(x_test,y_test)

y_pred = svc.predict(x_test)
print(classification_report(y_test,y_pred))

"""Group Members: \
Chirag (B19CSE026)
Gautam Kumar (B19EE031)

"""